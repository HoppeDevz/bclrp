local a=module('_core','libs/Tunnel')local b=module('_core','libs/Proxy')APICKF=b.getInterface('API')cAPI=a.getInterface('cAPI')hpp={}a.bindInterface("hpp_mechanic",hpp)local c=a.getInterface("hpp_mechanic")local d=module("_core","config/Permissions")Citizen.CreateThread(function()while true do Citizen.Wait(5*60*1000)collectgarbage("count")collectgarbage("collect")end end)API_Database={}local e=exports['GHMattiMySQL']DBConnect={driver='ghmattimysql',host='127.0.0.1',database='ckf2',user='root',password=''}local f={}local g;local h={}local i={}local j={}local k=false;function API_Database.registerDBDriver(l,m,n,o)if not f[l]then f[l]={m,n,o}if l==DBConnect.driver then g=f[l]local p=m(DBConnect)if p then k=true;for q,r in pairs(h)do n(table.unpack(r,1,table.maxn(r)))end;for q,s in pairs(i)do async(function()s[2](o(table.unpack(s[1],1,table.maxn(s[1]))))end)end;h=nil;i=nil else error('ConexÃ£o com o banco de dados perdida.')end end else error('Banco de dados registrado.')end end;function API_Database.format(t)local u,v,w=string.match(t,'^([^%d]*%d)(%d*)(.-)$')return u..v:reverse():gsub('(%d%d%d)','%1.'):reverse()..w end;function API_Database.prepare(l,s)j[l]=true;if k then g[2](l,s)else table.insert(h,{l,s})end end;function API_Database.query(l,x,y)if not j[l]then error('query '..l.." doesn't exist.")end;if not y then y='query'end;if k then return g[3](l,x or{},y)else local z=async()table.insert(i,{{l,x or{},y},z})return z:wait()end end;function API_Database.execute(l,x)return API_Database.query(l,x,'execute')end;local A={}local function m(B)return e~=nil end;local function n(l,s)A[l]=s end;local function o(l,x,y)local s=A[l]local C={}C._=true;for D,E in pairs(x)do C['@'..D]=E end;local z=async()if y=='execute'then e:QueryAsync(s,C,function(F)z(F or 0)end)elseif y=='scalar'then e:QueryScalarAsync(s,C,function(G)z(G)end)else e:QueryResultAsync(s,C,function(H)z(H,#H)end)end;return z:wait()end;Citizen.CreateThread(function()e:Query('SELECT 1')API_Database.registerDBDriver('ghmattimysql',m,n,o)end)API_Database.prepare('CKF_/getInfoDataByCharId','SELECT * FROM characters WHERE charid = @charid')API_Database.prepare('CKF_/getMechanicStock','SELECT * FROM mechanicstock WHERE id = 1')API_Database.prepare('CKF_/updateVehTyres','UPDATE mechanicstock SET vehtyres = @vehtyres WHERE id = 1')API_Database.prepare('CKF_/updateEngine','UPDATE mechanicstock SET engine = @engine WHERE id = 1')API_Database.prepare('CKF_/getVehTyresNumber','SELECT vehtyres FROM mechanicstock WHERE id = 1')API_Database.prepare('CKF_/remVehTyresNumber','UPDATE mechanicstock SET vehtyres = @vehtyres WHERE id = 1')API_Database.prepare('CKF_/getEngineNumber','SELECT engine FROM mechanicstock WHERE id = 1')API_Database.prepare('CKF_/remEngineNumber','UPDATE mechanicstock SET engine = @engine WHERE id = 1')function hpp.checkPerm(I)local J=source;local K=APICKF.getUserFromSource(J)local L=K:getCharacter()local M=L.id;local H=API_Database.query('CKF_/getInfoDataByCharId',{charid=M})local N=json.decode(H[1].groups)for D,E in pairs(N)do for O,P in pairs(d)do if D==O then if P.inheritance==I then return true end end end end;return false end;function hpp.hasHaveItem(Q)local J=source;local K=APICKF.getUserFromSource(J)if K then local L=K:getCharacter()if L then if L:getItemAmount(Q)>0 then return true else return false end end end end;function hpp.getVehTyresNumber()local H=API_Database.query('CKF_/getVehTyresNumber')return H[1].vehtyres end;function hpp.getEnginesNumber()local H=API_Database.query('CKF_/getEngineNumber')return H[1].engine end;function hpp.removeVehTyres(R)local H=API_Database.query('CKF_/getVehTyresNumber')local S=H[1].vehtyres;local T=H[1].vehtyres-parseInt(R)API_Database.query('CKF_/remVehTyresNumber',{vehtyres=parseInt(T)})end;function hpp.removeEngines(R)local H=API_Database.query('CKF_/getEngineNumber')local S=H[1].engine;local T=H[1].engine-parseInt(R)API_Database.query('CKF_/remEngineNumber',{engine=parseInt(T)})end;function hpp.getItem(U)local J=source;local K=APICKF.getUserFromSource(J)if K then local L=K:getCharacter()if L then local M=L.id;return L:getItemAmount(U)end end end;function hpp.removeItem(U,R)local J=source;local K=APICKF.getUserFromSource(J)if K then local L=K:getCharacter()if L then local M=L.id;L:removeItem(U,parseInt(R))end end end;function hpp.giveItem(Q,V)local J=source;local K=APICKF.getUserFromSource(J)if K then local L=K:getCharacter()if L then local M=L.id;L:addItem(Q,parseInt(V))end end end;function hpp.getMechanicStock()local H=API_Database.query('CKF_/getMechanicStock')return H[1]end;function hpp.addVehTyresStock(R)local J=source;local K=APICKF.getUserFromSource(J)if K then local L=K:getCharacter()if L then local M=L.id;if L:getItemAmount("vehtyres")>=parseInt(R)then L:removeItem("vehtyres",parseInt(R))local H=API_Database.query('CKF_/getMechanicStock')local W=H[1].vehtyres;local X=W+parseInt(R)API_Database.query('CKF_/updateVehTyres',{vehtyres=X})return true else return false end end end end;function hpp.addEngineStock(R)local J=source;local K=APICKF.getUserFromSource(J)if K then local L=K:getCharacter()if L then local M=L.id;if L:getItemAmount("vehengine")>=parseInt(R)then L:removeItem("vehengine",parseInt(R))local H=API_Database.query('CKF_/getMechanicStock')local W=H[1].engine;local X=W+parseInt(R)API_Database.query('CKF_/updateEngine',{engine=X})return true else return false end end end end;function hpp.checkWeight(Y)local J=source;local K=APICKF.getUserFromSource(J)if K then local L=K:getCharacter()if L then local M=L.id;local Z=L.Inventory:getCapacity()-L.Inventory:getWeight()local _=APICKF.getItemDataFromId(Y)local a0=_:getWeight()return parseInt(Z)<parseInt(a0)end end end;RegisterServerEvent("tryhood")AddEventHandler("tryhood",function(a1)TriggerClientEvent("synchood",-1,a1)end)RegisterServerEvent("trydoors")AddEventHandler("trydoors",function(a1,a2)TriggerClientEvent("syncdoors",-1,a1,a2)end)RegisterServerEvent("trytrunk")AddEventHandler("trytrunk",function(a1)TriggerClientEvent("synctrunk",-1,a1)end)