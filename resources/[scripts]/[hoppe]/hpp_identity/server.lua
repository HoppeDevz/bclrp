local a=module('_core','libs/Tunnel')local b=module('_core','libs/Proxy')APICKF=b.getInterface('API')cAPI=a.getInterface('cAPI')hpp={}a.bindInterface("hpp_identity",hpp)API_Database={}local c=exports['GHMattiMySQL']local d=module("_core","config/Permissions")Citizen.CreateThread(function()while true do Citizen.Wait(5*60*1000)collectgarbage("count")collectgarbage("collect")end end)DBConnect={driver='ghmattimysql',host='127.0.0.1',database='ckf2',user='root',password=''}local e={}local f;local g={}local h={}local i={}local j=false;function API_Database.registerDBDriver(k,l,m,n)if not e[k]then e[k]={l,m,n}if k==DBConnect.driver then f=e[k]local o=l(DBConnect)if o then j=true;for p,q in pairs(g)do m(table.unpack(q,1,table.maxn(q)))end;for p,r in pairs(h)do async(function()r[2](n(table.unpack(r[1],1,table.maxn(r[1]))))end)end;g=nil;h=nil else error('Conex√£o com o banco de dados perdida.')end end else error('Banco de dados registrado.')end end;function API_Database.format(s)local t,u,v=string.match(s,'^([^%d]*%d)(%d*)(.-)$')return t..u:reverse():gsub('(%d%d%d)','%1.'):reverse()..v end;function API_Database.prepare(k,r)i[k]=true;if j then f[2](k,r)else table.insert(g,{k,r})end end;function API_Database.query(k,w,x)if not i[k]then error('query '..k.." doesn't exist.")end;if not x then x='query'end;if j then return f[3](k,w or{},x)else local y=async()table.insert(h,{{k,w or{},x},y})return y:wait()end end;function API_Database.execute(k,w)return API_Database.query(k,w,'execute')end;local z={}local function l(A)return c~=nil end;local function m(k,r)z[k]=r end;local function n(k,w,x)local r=z[k]local B={}B._=true;for C,D in pairs(w)do B['@'..C]=D end;local y=async()if x=='execute'then c:QueryAsync(r,B,function(E)y(E or 0)end)elseif x=='scalar'then c:QueryScalarAsync(r,B,function(F)y(F)end)else c:QueryResultAsync(r,B,function(G)y(G,#G)end)end;return y:wait()end;Citizen.CreateThread(function()c:Query('SELECT 1')API_Database.registerDBDriver('ghmattimysql',l,m,n)end)API_Database.prepare('CKF_/getCharIdInfoData','SELECT * FROM characters WHERE charid = @charid')API_Database.prepare('CKF_/getCharIdByPlate','SELECT charid FROM characters_vehicles WHERE plate = @plate')function hpp.checkPerm(H)local I=source;local J=APICKF.getUserFromSource(I)local K=J:getCharacter()local L=K.id;local G=API_Database.query('CKF_/getCharIdInfoData',{charid=L})local M=json.decode(G[1].groups)for C,D in pairs(M)do for N,O in pairs(d)do if C==N then if O.inheritance==H then return true end end end end;return false end;function hpp.getDataByCharId()local I=source;local J=APICKF.getUserFromSource(I)if J then local K=J:getCharacter()if K then local L=K.id;local G=API_Database.query('CKF_/getCharIdInfoData',{charid=L})if G then local P={["user_id"]=G[1].user_id,["charid"]=G[1].charid,["name"]=G[1].characterName,["age"]=G[1].age,["bankMoney"]=G[1].money}return P end end end end;function hpp.policeGetDataByCharId(Q)local L=Q;local G=API_Database.query('CKF_/getCharIdInfoData',{charid=L})if G[1]then local P={["user_id"]=G[1].user_id,["charid"]=G[1].charid,["name"]=G[1].characterName,["age"]=G[1].age,["bankMoney"]=G[1].money}return{["error"]=false,["data"]=P}else return{["error"]=true,["reason"]="invalid id"}end end;function hpp.getPlateInfo(R)local S=API_Database.query('CKF_/getCharIdByPlate',{plate=R})if S[1]then local L=S[1].charid;local G=API_Database.query('CKF_/getCharIdInfoData',{charid=L})if G[1]then local P={["user_id"]=G[1].user_id,["charid"]=G[1].charid,["name"]=G[1].characterName,["age"]=G[1].age,["bankMoney"]=G[1].money}return{["error"]=false,["data"]=P}else return{["error"]=true,["reason"]="invalid id"}end else return{["error"]=true,["reason"]="dont searched plate"}end end