local a=module('_core','libs/Tunnel')local b=module('_core','libs/Proxy')APICKF=b.getInterface('API')cAPI=a.getInterface('cAPI')hpp={}a.bindInterface("hpp_chests",hpp)Citizen.CreateThread(function()while true do Citizen.Wait(5*60*1000)collectgarbage("count")collectgarbage("collect")end end)local c=a.getInterface("hpp_chests")local d=module("_core","config/Permissions")API_Database={}local e=exports['GHMattiMySQL']DBConnect={driver='ghmattimysql',host='127.0.0.1',database='ckf2',user='root',password=''}local f={}local g;local h={}local i={}local j={}local l=false;function API_Database.registerDBDriver(m,n,o,p)if not f[m]then f[m]={n,o,p}if m==DBConnect.driver then g=f[m]local q=n(DBConnect)if q then l=true;for r,s in pairs(h)do o(table.unpack(s,1,table.maxn(s)))end;for r,t in pairs(i)do async(function()t[2](p(table.unpack(t[1],1,table.maxn(t[1]))))end)end;h=nil;i=nil else error('Conexão com o banco de dados perdida.')end end else error('Banco de dados registrado.')end end;function API_Database.format(u)local v,w,x=string.match(u,'^([^%d]*%d)(%d*)(.-)$')return v..w:reverse():gsub('(%d%d%d)','%1.'):reverse()..x end;function API_Database.prepare(m,t)j[m]=true;if l then g[2](m,t)else table.insert(h,{m,t})end end;function API_Database.query(m,y,z)if not j[m]then error('query '..m.." doesn't exist.")end;if not z then z='query'end;if l then return g[3](m,y or{},z)else local A=async()table.insert(i,{{m,y or{},z},A})return A:wait()end end;function API_Database.execute(m,y)return API_Database.query(m,y,'execute')end;local B={}local function n(C)return e~=nil end;local function o(m,t)B[m]=t end;local function p(m,y,z)local t=B[m]local D={}D._=true;for k,E in pairs(y)do D['@'..k]=E end;local A=async()if z=='execute'then e:QueryAsync(t,D,function(F)A(F or 0)end)elseif z=='scalar'then e:QueryScalarAsync(t,D,function(G)A(G)end)else e:QueryResultAsync(t,D,function(H)A(H,#H)end)end;return A:wait()end;Citizen.CreateThread(function()e:Query('SELECT 1')API_Database.registerDBDriver('ghmattimysql',n,o,p)end)API_Database.prepare('CKF_/getChestsByCharId','SELECT * FROM chests WHERE charid = @charid')API_Database.prepare('CKF_/getInvByCharId','SELECT * FROM inventories WHERE charid = @charid')API_Database.prepare('CKF_/getChestsById','SELECT * FROM chests WHERE id = @id')API_Database.prepare('CKF_/getFactionChest','SELECT * FROM chests WHERE faction = @faction')API_Database.prepare('CKF_/getChest','SELECT * FROM chests WHERE id = @id')API_Database.prepare('CKF_/putItemInChest','UPDATE inventories SET items = @items WHERE id = @id')API_Database.prepare('CKF_/SetChestData','CALL setData(@target, @key, @value, @id)')API_Database.prepare('CKF_/RemChestData','CALL remData(@target, @key, @id)')API_Database.prepare('CKF_/createChest','INSERT INTO chests (charid, position, type, capacity, house) VALUES(@charid, @position, @type, @capacity, @house)')API_Database.prepare('CKF_/deleteChest','DELETE FROM chests WHERE house = @house')function hpp.getAllChests()local I=source;local J=APICKF.getUserFromSource(I)if J then local K=J:getCharacter()if K then local L=K.id;local H=API_Database.query('CKF_/getChestsByCharId',{charid=L})if K:hasGroup("cv")then local M=API_Database.query("CKF_/getFactionChest",{faction="cv"})table.insert(H,1,M[1])end;if K:hasGroup("pcc")then local M=API_Database.query("CKF_/getFactionChest",{faction="pcc"})table.insert(H,1,M[1])end;if K:hasGroup("motoclub")then local M=API_Database.query("CKF_/getFactionChest",{faction="motoclub"})table.insert(H,1,M[1])end;if K:hasGroup("ada")then local M=API_Database.query("CKF_/getFactionChest",{faction="ada"})table.insert(H,1,M[1])end;if K:hasGroup("antena")then local M=API_Database.query("CKF_/getFactionChest",{faction="antena"})table.insert(H,1,M[1])end;if K:hasGroup("mureta")then local M=API_Database.query("CKF_/getFactionChest",{faction="mureta"})table.insert(H,1,M[1])end;return H end end end;function setData(N,O,P,Q)API_Database.query("CKF_/SetCData",{target=O,key=P,value=Q,charid=N})end;function hpp.putInChest(R,S,T)local I=source;local J=APICKF.getUserFromSource(I)if J then local K=J:getCharacter()if K then local L=K.id;if K:getItemAmount(R)>=parseInt(S)then local H=API_Database.query('CKF_/getChest',{id=T})local U=json.decode(H[1].items)local V=0.0;local W=false;local X;for k,E in pairs(U)do if k and E then local Y=APICKF.getItemDataFromId(k)V=V+Y:getWeight()*E;if k==R then W=true;X=E end end end;local Z=H[1].capacity;local _=Z-V;if _>APICKF.getItemDataFromId(R):getWeight()*S then if W then K:removeItem(R,parseInt(S))API_Database.query("CKF_/SetChestData",{target='chest',key=R,value=parseInt(S)+X,id=T})TriggerClientEvent("Notify",I,"sucesso","Você guardou o item!")return true else K:removeItem(R,parseInt(S))API_Database.query("CKF_/SetChestData",{target='chest',key=R,value=parseInt(S),id=T})TriggerClientEvent("Notify",I,"sucesso","Você guardou o item!")return true end else TriggerClientEvent("chest-notify",I,"<b>~r~[AVISO] ~w~Espaço insuficiente!</b>")return false end else TriggerClientEvent("chest-notify",I,"<b>~r~[AVISO] ~w~Quantidade inválida!</b>")return false end end end end;function hpp.getChestWeight(a0)local I=source;local J=APICKF.getUserFromSource(I)if J then local K=J:getCharacter()if K then local L=K.id;local H=API_Database.query('CKF_/getChest',{id=a0})local V=0.0;if H then if H[1]then local U=json.decode(H[1].items)for k,E in pairs(U)do if k and E then local Y=APICKF.getItemDataFromId(k)V=V+Y:getWeight()*E end end end end;return V end end end;function hpp.checkChestHouseType(T)local H=API_Database.query('CKF_/getChest',{id=parseInt(T)})if H then if H[1].house~=nil or H[1].house~="NENHUMA"then return true else return false end else return false end end;function hpp.getItemWeight(a0)local Y=APICKF.getItemDataFromId(k)return Y:getWeight()end;function hpp.remInChest(R,S,T)local I=source;local J=APICKF.getUserFromSource(I)if J then local K=J:getCharacter()if K then local L=K.id;local H=API_Database.query('CKF_/getChest',{id=T})local a1=H[1].items;Citizen.Wait(math.random(30,400))local a2=API_Database.query('CKF_/getChest',{id=T})local a3=a2[1].items;if a3==a1 then else return TriggerClientEvent("Notify",I,"negado","Espere para tirar mais itens!")end;Citizen.Wait(math.random(30,400))local a4=API_Database.query('CKF_/getChest',{id=T})local a5=a4[1].items;if a5==a1 then else return TriggerClientEvent("Notify",I,"negado","Espere para tirar mais itens!")end;Citizen.Wait(math.random(30,400))local a6=API_Database.query('CKF_/getChest',{id=T})local a7=a6[1].items;if a7==a1 then else return TriggerClientEvent("Notify",I,"negado","Espere para tirar mais itens!")end;local _=K.Inventory:getCapacity()-K.Inventory:getWeight()local Y=""local Y=APICKF.getItemDataFromId(R)local U=json.decode(H[1].items)local W=false;local X;for k,E in pairs(U)do if k and E then if k==R then W=true;X=E end end end;local a8=Y:getWeight()if parseInt(_)>parseInt(a8)then if W then local a9=X-S;if a9<0 then return false end;if a9==0 then API_Database.query('CKF_/RemChestData',{target='chest',key=R,id=T})K:addItem(R,S)return true else API_Database.query("CKF_/SetChestData",{target='chest',key=R,value=X-S,id=T})K:addItem(R,S)return true end end else TriggerClientEvent("chest-notify",I,"<b>~r~[AVISO] ~w~Espaço insuficiente.</b>")return false end end end end;function hpp.getInventoryItems()local I=source;local J=APICKF.getUserFromSource(I)if J then local K=J:getCharacter()if K then local L=K.id;local H=API_Database.query('CKF_/getInvByCharId',{charid=parseInt(L)})return H[1].items end end end;function hpp.getChestItems(T)local H=API_Database.query('CKF_/getChestsById',{id=parseInt(T)})return H[1].items end;RegisterNetEvent("hoppe:create:chest")AddEventHandler("hoppe:create:chest",function(aa,ab,ac,ad)API_Database.query('CKF_/createChest',{charid=aa,position=json.encode(ab),type=0,capacity=ac,house=ad})end)RegisterNetEvent("hoppe:remove:chest")AddEventHandler("hoppe:remove:chest",function(ad)API_Database.query('CKF_/deleteChest',{house=ad})end)