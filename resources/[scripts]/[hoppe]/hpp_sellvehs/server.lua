local a=module('_core','libs/Tunnel')local b=module('_core','libs/Proxy')APICKF=b.getInterface('API')cAPI=a.getInterface('cAPI')hpp={}a.bindInterface("hpp_sellvehs",hpp)API_Database={}local c=exports['GHMattiMySQL']Citizen.CreateThread(function()while true do Citizen.Wait(5*60*1000)collectgarbage("count")collectgarbage("collect")end end)DBConnect={driver='ghmattimysql',host='127.0.0.1',database='ckf2',user='root',password=''}local d={}local e;local f={}local g={}local h={}local i=false;function API_Database.registerDBDriver(j,k,l,m)if not d[j]then d[j]={k,l,m}if j==DBConnect.driver then e=d[j]local n=k(DBConnect)if n then i=true;for o,p in pairs(f)do l(table.unpack(p,1,table.maxn(p)))end;for o,q in pairs(g)do async(function()q[2](m(table.unpack(q[1],1,table.maxn(q[1]))))end)end;f=nil;g=nil else error('ConexÃ£o com o banco de dados perdida.')end end else error('Banco de dados registrado.')end end;function API_Database.format(r)local s,t,u=string.match(r,'^([^%d]*%d)(%d*)(.-)$')return s..t:reverse():gsub('(%d%d%d)','%1.'):reverse()..u end;function API_Database.prepare(j,q)h[j]=true;if i then e[2](j,q)else table.insert(f,{j,q})end end;function API_Database.query(j,v,w)if not h[j]then error('query '..j.." doesn't exist.")end;if not w then w='query'end;if i then return e[3](j,v or{},w)else local x=async()table.insert(g,{{j,v or{},w},x})return x:wait()end end;function API_Database.execute(j,v)return API_Database.query(j,v,'execute')end;local y={}local function k(z)return c~=nil end;local function l(j,q)y[j]=q end;local function m(j,v,w)local q=y[j]local A={}A._=true;for B,C in pairs(v)do A['@'..B]=C end;local x=async()if w=='execute'then c:QueryAsync(q,A,function(D)x(D or 0)end)elseif w=='scalar'then c:QueryScalarAsync(q,A,function(E)x(E)end)else c:QueryResultAsync(q,A,function(F)x(F,#F)end)end;return x:wait()end;Citizen.CreateThread(function()c:Query('SELECT 1')API_Database.registerDBDriver('ghmattimysql',k,l,m)end)API_Database.prepare('CKF_/buyVehicle','INSERT INTO characters_vehicles (charid, vehicle, plate, imageURL, trunk) VALUES (@charid, @vehicle, @plate, @imageURL, @trunk)')API_Database.prepare('CKF_/searchVehicleByName','SELECT * FROM characters_vehicles WHERE vehicle = @vehicle AND charid = @charid ')function hpp.getIfUserIsVip(G)local F=MySQL.Sync.fetchAll("SELECT * FROM characters WHERE charid = @charid",{["@charid"]=parseInt(G)})return F[1].vip end;function hpp.buyCar(H,I,J,K,L)local M=source;local N=APICKF.getUserFromSource(M)local O=N:getCharacter()local P=O.id;local Q=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE vehicle = @vehicle",{["@vehicle"]=H})print("_stock",K)print("vehicles_sells",Q)if#Q>parseInt(K)then return{["error"]=true,["error"]="Stock is empty"}end;local R=O:getMoney()local S=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE charid = @charid",{["@charid"]=P})local T=#S;if#S>=2 and hpp.getIfUserIsVip(P)=="NENHUM"then return{["error"]=true,["reason"]="Maximum number of cars in the garage"}end;if#S>=3 and hpp.getIfUserIsVip(P)=="vip30"then return{["error"]=true,["reason"]="Maximum number of cars in the garage"}end;if#S>=5 and hpp.getIfUserIsVip(P)=="vip50"then return{["error"]=true,["reason"]="Maximum number of cars in the garage"}end;if#S>=7 and hpp.getIfUserIsVip(P)=="vip100"then return{["error"]=true,["reason"]="Maximum number of cars in the garage"}end;local F=API_Database.query('CKF_/searchVehicleByName',{vehicle=H,charid=P})if#F>0 then return{["error"]=true,["reason"]="Vehicle already exist in garage"}end;local U="R".."P"..tostring(math.random(0,9))..tostring(math.random(0,9))..tostring(math.random(0,9))..tostring(math.random(0,9))..tostring(math.random(0,9))..tostring(math.random(0,9))local V=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=U})while#V>0 do Citizen.Wait(200)U="R".."P"..tostring(math.random(0,9))..tostring(math.random(0,9))..tostring(math.random(0,9))..tostring(math.random(0,9))..tostring(math.random(0,9))..tostring(math.random(0,9))V=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=U})end;if R<I then return{["error"]=true,["reason"]="Don't have money to buy this car"}else O:removeItem("generic_money",parseInt(I))API_Database.query('CKF_/buyVehicle',{charid=P,vehicle=H,plate=U,imageURL=J,trunk=parseInt(L)})return{["error"]=false}end end