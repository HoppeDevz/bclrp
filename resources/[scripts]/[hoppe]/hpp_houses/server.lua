local a=module('_core','libs/Tunnel')local b=module('_core','libs/Proxy')APICKF=b.getInterface('API')cAPI=a.getInterface('cAPI')hpp={}a.bindInterface("hpp_houses",hpp)Citizen.CreateThread(function()while true do Citizen.Wait(5*60*1000)collectgarbage("count")collectgarbage("collect")end end)API_Database={}local c=exports['GHMattiMySQL']DBConnect={driver='ghmattimysql',host='127.0.0.1',database='ckf2',user='root',password=''}local d={}local e;local f={}local g={}local h={}local i=false;function API_Database.registerDBDriver(j,k,l,m)if not d[j]then d[j]={k,l,m}if j==DBConnect.driver then e=d[j]local n=k(DBConnect)if n then i=true;for o,p in pairs(f)do l(table.unpack(p,1,table.maxn(p)))end;for o,q in pairs(g)do async(function()q[2](m(table.unpack(q[1],1,table.maxn(q[1]))))end)end;f=nil;g=nil else error('ConexÃ£o com o banco de dados perdida.')end end else error('Banco de dados registrado.')end end;function API_Database.format(r)local s,t,u=string.match(r,'^([^%d]*%d)(%d*)(.-)$')return s..t:reverse():gsub('(%d%d%d)','%1.'):reverse()..u end;function API_Database.prepare(j,q)h[j]=true;if i then e[2](j,q)else table.insert(f,{j,q})end end;function API_Database.query(j,v,w)if not h[j]then error('query '..j.." doesn't exist.")end;if not w then w='query'end;if i then return e[3](j,v or{},w)else local x=async()table.insert(g,{{j,v or{},w},x})return x:wait()end end;function API_Database.execute(j,v)return API_Database.query(j,v,'execute')end;local y={}local function k(z)return c~=nil end;local function l(j,q)y[j]=q end;local function m(j,v,w)local q=y[j]local A={}A._=true;for B,C in pairs(v)do A['@'..B]=C end;local x=async()if w=='execute'then c:QueryAsync(q,A,function(D)x(D or 0)end)elseif w=='scalar'then c:QueryScalarAsync(q,A,function(E)x(E)end)else c:QueryResultAsync(q,A,function(F)x(F,#F)end)end;return x:wait()end;Citizen.CreateThread(function()c:Query('SELECT 1')API_Database.registerDBDriver('ghmattimysql',k,l,m)end)API_Database.prepare('CKF_/selectHouse','SELECT * FROM characters_homes WHERE charid = @charid AND houseName = @houseName')API_Database.prepare('CKF_/selectSpecifyHouse','SELECT * FROM characters_homes WHERE houseName = @houseName')API_Database.prepare('CKF_/buyHouse','INSERT INTO characters_homes (charid, houseName) VALUES (@charid, @houseName)')API_Database.prepare('CKF_/sellHouse','DELETE FROM characters_homes WHERE houseName = @houseName')API_Database.prepare('CKF_/getNameByCharId','SELECT * FROM characters WHERE charid = @charid')function hpp.enterHouse(G)local H=source;local I=APICKF.getUserFromSource(H)local J=I:getCharacter()local K=J.id;local F=API_Database.query('CKF_/selectHouse',{charid=K,houseName=G})if#F>0 then return{["error"]=false}else return{["error"]=true,["reason"]="User doesn't have this house in db"}end end;function hpp.buyHouse(G,L,M,N)local H=source;local I=APICKF.getUserFromSource(H)local J=I:getCharacter()local K=J.id;local F=API_Database.query('CKF_/selectSpecifyHouse',{houseName=G})if#F>0 then return{["error"]=true,["reason"]="This house has already been sold"}else local O=J:getMoney()if parseInt(O)>=parseInt(L)then J:removeMoney(parseInt(L))API_Database.query('CKF_/buyHouse',{charid=K,houseName=G})local P={M.x,M.y,M.z}print(P)TriggerEvent("hoppe:create:chest",K,P,parseInt(N),G)return{["error"]=false}else return{["error"]=true,["reason"]="Don't have money"}end end end;function hpp.sellHouse(G,L)local H=source;local I=APICKF.getUserFromSource(H)if I then local J=I:getCharacter()if J then local K=J.id;local F=API_Database.query('CKF_/selectHouse',{charid=K,houseName=G})if#F>0 then API_Database.execute('CKF_/sellHouse',{houseName=G})J:addItem("generic_money",parseInt(L)*0.5)TriggerEvent("hoppe:remove:chest",G)print(parseInt(L)*0.5)return{["error"]=false,["sellValue"]=parseInt(L)*0.5}else return{["error"]=true,["reason"]="dont have this house"}end end end end;function hpp.checkHouseSellStatus(Q)local F=API_Database.query('CKF_/selectSpecifyHouse',{houseName=Q})if#F>0 then local R=API_Database.query("CKF_/getNameByCharId",{charid=F[1].charid})return{exist=true,ownerName=R[1].characterName}else return{exist=false}end end;RegisterNetEvent("hoppe:update:houseblips")AddEventHandler("hoppe:update:houseblips",function()TriggerClientEvent("hoppe:update:houseblips",-1)end)