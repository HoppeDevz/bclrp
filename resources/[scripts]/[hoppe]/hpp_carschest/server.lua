local a=module('_core','libs/Tunnel')local b=module('_core','libs/Proxy')APICKF=b.getInterface('API')cAPI=a.getInterface('cAPI')hpp={}a.bindInterface("hpp_carschest",hpp)local c=a.getInterface("hpp_carschest")local d=module("_core","config/Permissions")API_Database={}local e=exports['GHMattiMySQL']DBConnect={driver='ghmattimysql',host='127.0.0.1',database='ckf2',user='root',password=''}local f={}local g;local h={}local i={}local j={}local k=false;function API_Database.registerDBDriver(l,m,n,o)if not f[l]then f[l]={m,n,o}if l==DBConnect.driver then g=f[l]local p=m(DBConnect)if p then k=true;for q,r in pairs(h)do n(table.unpack(r,1,table.maxn(r)))end;for q,s in pairs(i)do async(function()s[2](o(table.unpack(s[1],1,table.maxn(s[1]))))end)end;h=nil;i=nil else error('Conexão com o banco de dados perdida.')end end else error('Banco de dados registrado.')end end;function API_Database.format(t)local u,v,w=string.match(t,'^([^%d]*%d)(%d*)(.-)$')return u..v:reverse():gsub('(%d%d%d)','%1.'):reverse()..w end;function API_Database.prepare(l,s)j[l]=true;if k then g[2](l,s)else table.insert(h,{l,s})end end;function API_Database.query(l,x,y)if not j[l]then error('query '..l.." doesn't exist.")end;if not y then y='query'end;if k then return g[3](l,x or{},y)else local z=async()table.insert(i,{{l,x or{},y},z})return z:wait()end end;function API_Database.execute(l,x)return API_Database.query(l,x,'execute')end;local A={}local function m(B)return e~=nil end;local function n(l,s)A[l]=s end;local function o(l,x,y)local s=A[l]local C={}C._=true;for D,E in pairs(x)do C['@'..D]=E end;local z=async()if y=='execute'then e:QueryAsync(s,C,function(F)z(F or 0)end)elseif y=='scalar'then e:QueryScalarAsync(s,C,function(G)z(G)end)else e:QueryResultAsync(s,C,function(H)z(H,#H)end)end;return z:wait()end;Citizen.CreateThread(function()e:Query('SELECT 1')API_Database.registerDBDriver('ghmattimysql',m,n,o)end)API_Database.prepare('CKF_/carsChestGetInvItemsByCharId','SELECT items FROM inventories WHERE charid = @charid')API_Database.prepare('CKF_/carsChestGetVehChestByPlate','SELECT items FROM characters_vehicles WHERE plate = @plate')API_Database.prepare('CKF_/getCarByPlate','SELECT * FROM characters_vehicles WHERE plate = @plate')API_Database.prepare('CKF_/SetChestData','CALL vehchest(@target, @key, @value, @id)')API_Database.prepare('CKF_/RemChestData','CALL remData(@target, @key, @id)')local I={}RegisterNetEvent("add:veh:chest:in:using")AddEventHandler("add:veh:chest:in:using",function(J)table.insert(I,1,J)end)RegisterNetEvent("remove:veh:chest:in:using")AddEventHandler("remove:veh:chest:in:using",function(J)for K=1,#I do if I[K]then if I[K]==J then I[K]=nil end end end end)function hpp.checkChestIsUsing(J)for K=1,#I do if I[K]then if I[K]==J then return true else return false end end end end;function hpp.getExistPlateInDb(J)local H=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})if H[1]then return true else return false end end;function hpp.getInvItems()local L=source;local M=APICKF.getUserFromSource(L)if M then local N=M:getCharacter()if N then local O=N.id;local H=MySQL.Sync.fetchAll("SELECT items FROM inventories WHERE charid = @charid",{["@charid"]=O})local P=H;return json.decode(P[1].items)end end end;function hpp.getVehChest(J)local L=source;local M=APICKF.getUserFromSource(L)if M then local N=M:getCharacter()if N then local H=MySQL.Sync.fetchAll("SELECT items FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})local Q=H;return json.decode(Q[1].items)end end end;function hpp.getVehicleChestCapacity(J)local H=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})return H[1].trunk end;function hpp.putItemInVehChest(R,S,J,T)local L=source;local M=APICKF.getUserFromSource(L)if M then local N=M:getCharacter()if N then local O=N.id;local H=MySQL.Sync.fetchAll("SELECT items FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})local U=json.decode(H[1].items)local V=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})local W=V[1].id;local X=APICKF.getItemDataFromId(R):getWeight()*parseInt(S)local Y=0;for D,E in pairs(U)do if D==R then Y=parseInt(S)+parseInt(E)end end;local Z=0;for _,a0 in pairs(U)do if _ and a0 then local a1=APICKF.getItemDataFromId(_)Z=Z+a1:getWeight()*a0 end end;if T-Z>X then if Y>0 then MySQL.Sync.fetchAll("CALL vehchest(@target, @key, @value, @id)",{["@target"]="vehchest",["@key"]=tostring(R),["@value"]=tostring(Y),["@id"]=tonumber(parseInt(W))})N:removeItem(R,S)return true else MySQL.Sync.fetchAll("CALL vehchest(@target, @key, @value, @id)",{["@target"]="vehchest",["@key"]=R,["@value"]=S,["@id"]=W})N:removeItem(R,S)return true end else return false end end end end;function hpp.getVehChestWeight(J)local H=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})local U=json.decode(H[1].items)local Z=0;for _,a0 in pairs(U)do if _ and a0 then local a1=APICKF.getItemDataFromId(_)Z=Z+a1:getWeight()*a0 end end;return Z end;function hpp.remItemInVehChest(R,S,J)local L=source;local M=APICKF.getUserFromSource(L)if M then local N=M:getCharacter()if N then local H=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})local Q=json.decode(H[1].items)local a2=H[1].items;Citizen.Wait(math.random(30,400))local V=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})local a3=V[1].items;if a3==a2 then else return TriggerClientEvent("Notify",L,"negado","Espere para tirar mais itens!")end;Citizen.Wait(math.random(30,400))local a4=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})local a5=a4[1].items;if a5==a2 then else return TriggerClientEvent("Notify",L,"negado","Espere para tirar mais itens!")end;Citizen.Wait(math.random(30,400))local a6=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})local a7=a6[1].items;if a7==a2 then else return TriggerClientEvent("Notify",L,"negado","Espere para tirar mais itens!")end;local a8=N.Inventory:getCapacity()-N.Inventory:getWeight()local a1=""local a9;for D,E in pairs(Q)do if D==R then a9=parseInt(E)-parseInt(S)a1=APICKF.getItemDataFromId(R)end end;local X=a1:getWeight()local V=MySQL.Sync.fetchAll("SELECT * FROM characters_vehicles WHERE plate = @plate",{["@plate"]=J})local W=V[1].id;if parseInt(a8)>parseInt(X)then if a9==0 then MySQL.Sync.fetchAll("CALL remData(@target, @key, @id)",{["@target"]="vehchest",["@key"]=tostring(R),["@id"]=tonumber(parseInt(W))})N:addItem(R,S)return true else if a9 then MySQL.Sync.fetchAll("CALL vehchest(@target, @key, @value, @id)",{["@target"]="vehchest",["@key"]=tostring(R),["@value"]=a9,["@id"]=tonumber(parseInt(W))})N:addItem(R,S)return true end end else TriggerClientEvent("hoppe:carschest:notify",L,"<b> ~r~[AVISO] ~w~Espaço insuficiente!</b>")return false end end end end;RegisterServerEvent("trytrunk")AddEventHandler("trytrunk",function(aa)TriggerClientEvent("synctrunk",-1,aa)end)