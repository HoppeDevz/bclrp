local a=module('_core','libs/Tunnel')local b=module('_core','libs/Proxy')APICKF=b.getInterface('API')cAPI=a.getInterface('cAPI')hpp={}a.bindInterface("hpp_racing",hpp)local c=a.getInterface("hpp_racing")Citizen.CreateThread(function()while true do Citizen.Wait(5*60*1000)collectgarbage("count")collectgarbage("collect")end end)API_Database={}local d=exports['GHMattiMySQL']local e=module("_core","config/Permissions")DBConnect={driver='ghmattimysql',host='127.0.0.1',database='ckf2',user='root',password=''}local f={}local g;local h={}local i={}local j={}local k=false;function API_Database.registerDBDriver(l,m,n,o)if not f[l]then f[l]={m,n,o}if l==DBConnect.driver then g=f[l]local p=m(DBConnect)if p then k=true;for q,r in pairs(h)do n(table.unpack(r,1,table.maxn(r)))end;for q,s in pairs(i)do async(function()s[2](o(table.unpack(s[1],1,table.maxn(s[1]))))end)end;h=nil;i=nil else error('Conex√£o com o banco de dados perdida.')end end else error('Banco de dados registrado.')end end;function API_Database.format(t)local u,v,w=string.match(t,'^([^%d]*%d)(%d*)(.-)$')return u..v:reverse():gsub('(%d%d%d)','%1.'):reverse()..w end;function API_Database.prepare(l,s)j[l]=true;if k then g[2](l,s)else table.insert(h,{l,s})end end;function API_Database.query(l,x,y)if not j[l]then error('query '..l.." doesn't exist.")end;if not y then y='query'end;if k then return g[3](l,x or{},y)else local z=async()table.insert(i,{{l,x or{},y},z})return z:wait()end end;function API_Database.execute(l,x)return API_Database.query(l,x,'execute')end;local A={}local function m(B)return d~=nil end;local function n(l,s)A[l]=s end;local function o(l,x,y)local s=A[l]local C={}C._=true;for D,E in pairs(x)do C['@'..D]=E end;local z=async()if y=='execute'then d:QueryAsync(s,C,function(F)z(F or 0)end)elseif y=='scalar'then d:QueryScalarAsync(s,C,function(G)z(G)end)else d:QueryResultAsync(s,C,function(H)z(H,#H)end)end;return z:wait()end;Citizen.CreateThread(function()d:Query('SELECT 1')API_Database.registerDBDriver('ghmattimysql',m,n,o)end)API_Database.prepare("CKF_/getScoreBoardByRaceId","SELECT * FROM racings WHERE raceid = @raceid")API_Database.prepare("CKF_/getScoreFromRun","SELECT * FROM racings WHERE charid = @charid AND raceid = @raceid")API_Database.prepare("CKF_/insertScore","INSERT INTO racings (raceid, charid, name, time) VALUES (@raceid, @charid, @name, @time)")API_Database.prepare("CKF_/updateScore","UPDATE racings SET time = @time WHERE raceid = @raceid AND charid = @charid")function hpp.getScoreBoard(I)local J={}local K=0;local H=API_Database.query("CKF_/getScoreBoardByRaceId",{raceid=parseInt(I)})for L,M in pairs(H)do K=K+1 end;if K<3 then if K==0 then return{{["name"]="NENHUM",["time"]="0"},{["name"]="NENHUM",["time"]="0"},{["name"]="NENHUM",["time"]="0"}}elseif K==1 then return{{["name"]=H[1].name,["time"]=H[1].time},{["name"]="NENHUM",["time"]="0"},{["name"]="NENHUM",["time"]="0"}}elseif K==2 then if H[1].time<H[2].time then return{{["name"]=H[1].name,["time"]=H[1].time},{["name"]=H[2].name,["time"]=H[2].time},"NENHUM"}else return{{["name"]=H[2].name,["time"]=H[2].time},{["name"]=H[1].name,["time"]=H[1].time},"NENHUM"}end end else for D,E in pairs(H)do for N,O in pairs(H)do if parseInt(H[D].time)<=parseInt(H[N].time)then if N==K then table.insert(J,1,H[D])table.remove(H,D)end else break end end end;for D,E in pairs(H)do for N,O in pairs(H)do if parseInt(H[D].time)<=parseInt(H[N].time)then if N==K-1 then table.insert(J,2,H[D])table.remove(H,D)end else break end end end;for D,E in pairs(H)do for N,O in pairs(H)do if parseInt(H[D].time)<=parseInt(H[N].time)then if N==K-2 then table.insert(J,3,H[D])table.remove(H,D)end else break end end end;return J end end;function hpp.getAward()local P=source;local Q=APICKF.getUserFromSource(P)if Q then local R=Q:getCharacter()if R then local S=math.random(50,300)R:addItem("generic_blackmoney",S)return S end end end;function hpp.saveRunTime(T,U)local P=source;local Q=APICKF.getUserFromSource(P)if Q then local R=Q:getCharacter()if R then local V=R.id;local W=R.charName;local H=API_Database.query("CKF_/getScoreFromRun",{charid=V,raceid=T})if#H>0 then local H=API_Database.query("CKF_/getScoreFromRun",{charid=V,raceid=T})if parseInt(H[1].time)>parseInt(U)then API_Database.query("CKF_/updateScore",{time=U,charid=V,raceid=T})end else API_Database.query("CKF_/insertScore",{charid=V,raceid=T,name=W,time=U})end end end end